{"!ACTION"} -- Clip (It will interrupt the current cast if it exists)
{"@ACTION"} -- Executes a users lib
{"#ACTION"} -- Items (Ex: #12345, #trinket1, #trinket2
{"%ACTION"} -- Regular actions (Ex: %pause, %print, %target, %dispelself, %dispelall)
{"*ACTION"} -- Castable while casting other spells
{"&ACTION"} -- No GCD Spell
{">ACTION"} -- Queuer spell
{"/ACTION"} -- Executes a users macro

_A.FakeUnits:Add('enemies', function()
_A.FakeUnits:Add({'combatEnemies', 'cbEnemies'}, function()
_A.FakeUnits:Add('friends', function()
_A.FakeUnits:Add("roster", function()
_A.FakeUnits:Add("dead", function()
-- Lowest
_A.FakeUnits:Add('lowest', function(num, xrole)
_A.FakeUnits:Add({'lowestpredicted', 'lowestp'}, function(num, xrole)
-- lowest with certain buff from player
_A.FakeUnits:Add({'lowestbuff', 'lbuff'}, function(num, arg
-- lowets without certain buff from player
_A.FakeUnits:Add({'lowestnotbuff', 'lnbuff'}, function(num, args)
-- lowest with certain debuff from any
_A.FakeUnits:Add({'lowestdebuff', 'ldebuff'}, function(num, args)
-- lowets without certain debuff from any
_A.FakeUnits:Add({'lowestnotdebuff', 'lndebuff'}, function(num, args)
_A.FakeUnits:Add('tank', function(num)
_A.FakeUnits:Add('healer', function(num)
_A.FakeUnits:Add('damager', function(num)
-- Lowest enemy
_A.FakeUnits:Add({'lowestenemy', 'loweste', 'le'}, function(num)
-- enemy with buff
_A.FakeUnits:Add({'enemybuff', 'ebuff'}, function(_, buff)
-- enemy without buff
_A.FakeUnits:Add({'enemynbuff', 'enbuff'}, function(_, buff)
-- enemy with debuff
_A.FakeUnits:Add({'enemydebuff', 'edebuff'}, function(_, debuff)
-- enemy without debuff
_A.FakeUnits:Add({'enemyndebuff', 'endebuff'}, function(_, debuff)
-- enemy ADD (boss adds)
_A.FakeUnits:Add('adds', function()
-- enemy Boss
_A.FakeUnits:Add('boss', function()


_A.OM = {
    All            = {},
    Enemy          = {},
    EnemyCombat    = {},
    Friendly       = {},
    Roster         = {},
    Dead           = {},
    Critters       = {},
    Object         = {},
    GameObject     = {},
    DynamicObject  = {},
}

_A.ObjectType = {
    Object = 0,
    Item = 1,
    Container = 2,
    Unit = 3,
    Player = 4,
    GameObject = 5,
    DynamicObject = 6,
    Corpse = 7,
    ActivePlayer = 10,
}

_A.Library:Add('interact',function(obj)
    if not _A.DSL:Get("isCastingAny")("player") then
       _A.ObjectInteract(obj)   
   end
end)
--usage
{@interact, "delay(herb,2", "HERBS"}, 

local HERBS = {["Adder's Tongue"] = true, ["Ancient Lichen"] = true, ["Arthas' Tears"] = true,}

_A.FakeUnits:Add('HERBS', function(num)
    local tempTable = {}
    for _, Obj in pairs(_A.OM:Get('GameObject')) do
        if HERBS[Obj.name] then
            tempTable[#tempTable+1] = {
                guid = Obj.guid,
                distance = Obj:distance()
            }
        end
    end
    if #tempTable > 1 then
        table.sort(tempTable, function(a, b) return a.distance < b.distance end)
    end
    return tempTable[num] and tempTable[num].guid        
end)


local GUI = {
    {type = "header", size = 16, text = "|cFFe95ca1BoomerPriests1|r", align = "center"},
    {type = "ruler"},
    {type = "spacer", size = 2},
    {type = "header", size = 16, text = "|cFFe95ca1Keybinds|r", align = "left"},
    {type = "ruler"},
    {type = "spacer", size = 2},
    {
        type = "input",
        size = 14,
        y = -10,
        text = FlexIcon(8122) .. "Fear key" ,
        width = 50,
        default = "nil",
        key = "Fear_key",
        tooltip = "Fear Key"
    },
    {
        type = "dropdown",
        size = 14,
        width = 80,
        align = "left",
        x = 150,
        y = 18,
        default = "nomod",
        key = "FearMod",
        list = {
            { key = "nomod",    text = "nomod" },
            { key = "CTRL",   text = "CTRL" },
            { key = "ALT",    text = "ALT" },
            { key = "SHIFT",  text = "SHIFT" }
        }
    },
    {type = "spacer", size = 2},

}

	--================ canned, leaving if something goes wrong
	-- soulswap = function() -- order by highest score first, highest duration second
		-- local temptable = {}
		-- if _A.enoughmana(86121) and #_A.temptabletbl>1 then
			-- if soulswaporigin == nil then
				-- for _, Obj in pairs(_A.OM:Get('Enemy')) do
					-- if Obj:spellRange(172) and _A.attackable(Obj) and _A.notimmune(Obj) and Obj:los() then
						-- temptable[#temptable+1] = {
							-- obj = Obj,
							-- duration = Obj:DebuffDuration("Unstable Affliction") or Obj:DebuffDuration("Corruption") or Obj:DebuffDuration("Agony") or 0
						-- }
					-- end
				-- end
			-- end
			-- if #temptable > 1 then
				-- table.sort( temptable, function(a,b) return ( a.duration > b.duration ) end ) -- highest duration is always the best solution for soulswap
			-- end
			-- return temptable[1] and temptable[1].obj:Cast(86121)
		-- end
	-- end,
	
	-- exhale = function() -- not sure about the best solution yet
		-- local temptable = {}
		-- if soulswaporigin ~= nil then
			-- for _, Obj in pairs(_A.OM:Get('Enemy')) do
				-- if Obj:spellRange(172) and _A.attackable(Obj) and _A.notimmune(Obj) and Obj:los() then
					-- if Obj.guid ~= soulswaporigin then -- can't exhale on the soulswap
						-- temptable[#temptable+1] = {
							-- obj = Obj,
							-- rangedis = Obj:range(2) or 40,
							-- isplayer = Obj.isplayer and 1 or 0,
							-- health = Obj:HealthActual() or 0,
							-- duration = Obj:DebuffDuration("Unstable Affliction") or Obj:DebuffDuration("Corruption") or Obj:DebuffDuration("Agony") or 0 -- duration, best solution to spread it to as many units as possible, always order by this first
						-- }
					-- end
				-- end
			-- end
			-- if #temptable > 1 then
				-- table.sort(temptable, function(a,b) return  (a.duration < b.duration )  -- order by duration
					-- or (a.duration == b.duration and a.isplayer > b.isplayer ) -- if same (or no) duration, order by players first
					-- or (a.duration == b.duration and a.isplayer == b.isplayer and a.health > b.health )  -- if same (or no) duration, and same isplayer, order by highest health
				-- end
				-- )
			-- end
			-- return temptable[1] and temptable[1].obj:Cast(86213)
		-- end
	-- end,